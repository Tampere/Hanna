name: CI

on:
  # Open any PR -> run tests
  pull_request:
    types: [opened]
  # Push to main branch -> run tests, build & deploy to test
  push:
    branches: [main]
  # Release -> run tests, build & deploy to production
  release:
    types: [released]

env:
  NODE_VERSION: 18

jobs:
  test-frontend:
    name: Test frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Build & test
        working-directory: frontend
        run: npm i && npm test && npm run build

  test-backend:
    name: Test backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Build 6 test
        working-directory: backend
        run: npm i && npm test && npm run build

  test-shared:
    runs-on: ubuntu-latest
    name: Test shared
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Build & test
        working-directory: shared
        run: npm i && npm test && npm run build

  build:
    name: Build
    # Run build only on pushes to main & when publishing a release
    if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-shared]
    env:
      IMAGE_NAME: ${{ secrets.REGISTRY_ADDRESS }}/hanna
      ENV_NAME: ${{ github.event_name == 'release' && 'production' || 'test' }}
      APP_URL: ${{ github.event_name == 'release' && 'https://hanna.tampere.fi' || 'https://tre-hanna-test.azurewebsites.net' }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_ADDRESS }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      # Push 2 tags - latest (used for caching) and test or production
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ env.ENV_NAME }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
    # "Export" some environment variables for the deploy job
    outputs:
      env_name: ${{ env.ENV_NAME }}
      app_url: ${{ env.APP_URL }}

  deploy:
    name: Deploy to ${{ needs.build.outputs.environment }}
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.build.outputs.env_name }}
      url: ${{ needs.build.outputs.app_url }}
    steps:
      - name: Deploy
        run: curl -X POST ${{ secrets.DEPLOY_WEBHOOK_URL }}
