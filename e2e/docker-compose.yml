version: '3.8'
services:
  frontend:
    build:
      context: ..
      dockerfile: frontend/Dockerfile.dev
      args:
        - CI=${CI:-}
    environment:
      - CI=${CI:-}
      - BACKEND_HOST=backend
      - HMR_PORT=1443
    volumes:
      # For container based development to show git changes in the whole workspace
      - ../.git:/app/.git:cached
      - ../:/app/
      - /app/frontend/dist
      - /app/frontend/node_modules
      - /app/shared/node_modules
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    build:
      context: ..
      dockerfile: backend/Dockerfile.dev
    environment:
      - NODE_ENV=development
    volumes:
      - ../.git:/app/.git:cached
      - ../:/app/
      - ./backend.env:/app/backend/.env
      - /app/backend/node_modules
      - /app/shared/node_modules
    ports:
      - '127.0.0.1:13003:3003'
      - '127.0.0.1:19090:19090'
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3003/api/v1/health || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
    # Run migrations to the test DB on every startup
    command: sh -c "npm run db-migrate && npm run dev"

  oidc-provider:
    build:
      context: ../docker/oidc-provider/
      dockerfile: Dockerfile
    environment:
      - OIDC_PORT=19090
      - OIDC_REDIRECT_URI=https://localhost:1443/api/v1/auth/callback
    network_mode: service:backend

  sap-mock:
    build:
      context: ../docker/sap-mock/
      dockerfile: Dockerfile
    volumes:
      - ../docker/sap-mock:/app/
      - ../backend/resources/projectinfo.wsdl:/app/projectinfo.wsdl
      - ../backend/resources/actuals.wsdl:/app/actuals.wsdl
    ports:
      - '127.0.0.1:19043:13000'
    environment:
      - SAP_MOCK_PORT=13000

  db:
    image: postgis/postgis:12-3.3-alpine
    restart: always
    environment:
      POSTGRES_USER: app_user_dev
      POSTGRES_PASSWORD: DevPassword
      POSTGRES_DB: app_dev_db
    ports:
      - '127.0.0.1:5432:5432'
    volumes:
      - ../docker/db/init/20-init.sql:/docker-entrypoint-initdb.d/20-init.sql
    healthcheck:
      test: psql -U app_user_dev -d app_dev_db -c "SELECT 1"
      interval: 5s
      timeout: 5s
      retries: 10

  proxy:
    image: caddy:2-alpine
    ports:
      - '127.0.0.1:1443:443'
    environment:
      - PROXY_TARGET_HOST=frontend
    volumes:
      - ../docker/proxy/Caddyfile:/etc/caddy/Caddyfile
      - ../docker/proxy/data:/data
